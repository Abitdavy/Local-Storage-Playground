// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'object box/model todo detail/model_detail.dart';
import 'object box/model todo/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 5608801066850762871),
      name: 'TodoDetailDBObjectBox',
      lastPropertyId: const IdUid(5, 2718591640661422551),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5087334714400935982),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 950209784431440694),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1336117992745005763),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8496390583767998453),
            name: 'completed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2718591640661422551),
            name: 'uid',
            type: 6,
            flags: 8,
            indexId: const IdUid(3, 3033523723768942920))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3642486039391933336),
      name: 'TodoDBObjectBox',
      lastPropertyId: const IdUid(4, 5376208220143762351),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8253806595147648663),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2418889245654886840),
            name: 'version',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5376208220143762351),
            name: 'uid',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 5724475356555090291))
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 7775691743282940477),
            name: 'detailDB',
            targetId: const IdUid(2, 5608801066850762871))
      ],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 3642486039391933336),
      lastIndexId: const IdUid(3, 3033523723768942920),
      lastRelationId: const IdUid(1, 7775691743282940477),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [2313501857049711438],
      retiredIndexUids: const [2972591323310987214],
      retiredPropertyUids: const [
        2836074938754999984,
        818949953409020580,
        7570589123913298688
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    TodoDetailDBObjectBox: EntityDefinition<TodoDetailDBObjectBox>(
        model: _entities[0],
        toOneRelations: (TodoDetailDBObjectBox object) => [],
        toManyRelations: (TodoDetailDBObjectBox object) => {},
        getId: (TodoDetailDBObjectBox object) => object.id,
        setId: (TodoDetailDBObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (TodoDetailDBObjectBox object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.userId);
          fbb.addOffset(2, titleOffset);
          fbb.addBool(3, object.completed);
          fbb.addInt64(4, object.uid);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final userIdParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);
          final uidParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final completedParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 10);
          final object = TodoDetailDBObjectBox(
              userId: userIdParam,
              uid: uidParam,
              title: titleParam,
              completed: completedParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    TodoDBObjectBox: EntityDefinition<TodoDBObjectBox>(
        model: _entities[1],
        toOneRelations: (TodoDBObjectBox object) => [],
        toManyRelations: (TodoDBObjectBox object) =>
            {RelInfo<TodoDBObjectBox>.toMany(1, object.id!): object.detailDB},
        getId: (TodoDBObjectBox object) => object.id,
        setId: (TodoDBObjectBox object, int id) {
          object.id = id;
        },
        objectToFB: (TodoDBObjectBox object, fb.Builder fbb) {
          final versionOffset =
              object.version == null ? null : fbb.writeString(object.version!);
          final uidOffset =
              object.uid == null ? null : fbb.writeString(object.uid!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, versionOffset);
          fbb.addOffset(3, uidOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final versionParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = TodoDBObjectBox(version: versionParam, uid: uidParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
          InternalToManyAccess.setRelInfo<TodoDBObjectBox>(object.detailDB,
              store, RelInfo<TodoDBObjectBox>.toMany(1, object.id!));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [TodoDetailDBObjectBox] entity fields to define ObjectBox queries.
class TodoDetailDBObjectBox_ {
  /// see [TodoDetailDBObjectBox.id]
  static final id =
      QueryIntegerProperty<TodoDetailDBObjectBox>(_entities[0].properties[0]);

  /// see [TodoDetailDBObjectBox.userId]
  static final userId =
      QueryIntegerProperty<TodoDetailDBObjectBox>(_entities[0].properties[1]);

  /// see [TodoDetailDBObjectBox.title]
  static final title =
      QueryStringProperty<TodoDetailDBObjectBox>(_entities[0].properties[2]);

  /// see [TodoDetailDBObjectBox.completed]
  static final completed =
      QueryBooleanProperty<TodoDetailDBObjectBox>(_entities[0].properties[3]);

  /// see [TodoDetailDBObjectBox.uid]
  static final uid =
      QueryIntegerProperty<TodoDetailDBObjectBox>(_entities[0].properties[4]);
}

/// [TodoDBObjectBox] entity fields to define ObjectBox queries.
class TodoDBObjectBox_ {
  /// see [TodoDBObjectBox.id]
  static final id =
      QueryIntegerProperty<TodoDBObjectBox>(_entities[1].properties[0]);

  /// see [TodoDBObjectBox.version]
  static final version =
      QueryStringProperty<TodoDBObjectBox>(_entities[1].properties[1]);

  /// see [TodoDBObjectBox.uid]
  static final uid =
      QueryStringProperty<TodoDBObjectBox>(_entities[1].properties[2]);

  /// see [TodoDBObjectBox.detailDB]
  static final detailDB =
      QueryRelationToMany<TodoDBObjectBox, TodoDetailDBObjectBox>(
          _entities[1].relations[0]);
}
